#lagged Function, just copas from 
#https://stackoverflow.com/questions/20410312/how-to-create-a-lagged-data-structure-using-pandas-dataframe
def LaggedFeatures(s,lag=2,fillna=True, dropna=False):
    if type(s) is pd.DataFrame:
        new_dict={}
        for col_name in s:
            new_dict[col_name]=s[col_name]
            # create lagged Series
            for l in range(1,lag+1):
                new_dict['%s_lag%d' %(col_name,l)]=s[col_name].shift(l)
        res=pd.DataFrame(new_dict,index=s.index)

    elif type(s) is pd.Series:
        the_range=range(lag+1)
        res=pd.concat([s.shift(i) for i in the_range],axis=1)
        res.columns=['lag_%d' %i for i in the_range]
    else:
        print ('Only works for DataFrame or Series')
        return None
    if dropna:
        res = res.dropna()
    else:
        res = res
    if fillna:
        return res.fillna(0)
    else:
        return res 
        
import pandas as pd

df = pd.read_csv("./dailydonation.csv")
df.head()

data = df.drop(['tanggal','year','Hijri Date','Hijri Month'], axis=1)
data.head()

data.shape

#Membuat lag 7
lag = LaggedFeatures(data,lag=7,fillna=True, dropna=True)
lag.shape

lag.head()

import pandas as pd

df = pd.read_excel("donasi.xlsx", sheet_name="data_forecast")
df.head()

#Perlu ubah nama kolom dulu
daily_nominal = df[['tanggal','nominal']].rename(
columns = {'tanggal':'ds',
             'nominal':'y'})
daily_nominal.head()

#Ubah tipe data menjadi date
daily_nominal['ds'] = pd.to_datetime(daily_nominal['ds'])
daily_nominal.dtypes

#Bagi trai test
cutoff = pd.to_datetime('2021-09-30')
train = daily_nominal[daily_nominal['ds'] < cutoff]
test = daily_nominal[daily_nominal['ds'] >= cutoff]

print(f'Train size: {train.shape}')
print(f'Test size: {test.shape}')

pip install prophet

#mulai train
from prophet import Prophet
import matplotlib.pyplot as plt

#fitting model
model_prophet = Prophet()
model_prophet.add_seasonality(name = 'monthly', period = 30.5, fourier_order = 5)
model_prophet.fit(train) #only train

#forecasting
future_daily = model_prophet.make_future_dataframe(periods = 600, freq = 'D') 
forecast_daily = model_prophet.predict(future_daily)
forecast_daily.loc[(forecast_daily.yhat < 0),['yhat']] = 0

#visualize
fig = model_prophet.plot(forecast_daily)
plt.scatter(x=test['ds'], y=test['y'], s=10, color='red')
plt.show()

#memasukkan seasonal "Holiday"
holiday = pd.DataFrame({
    'holiday' : 'lebaran',
    'ds' : pd.to_datetime(['2020-05-25','2021-05-14',  # past date, historical data 
                           '2022-05-04','2023-04-22']),# future date, to be forecasted
    'lower_window' : -30,
    'upper_window' : 0})
holiday

from prophet import Prophet
#fitting model
model_prophet = Prophet(
    holidays = holiday,
    holidays_prior_scale = 0.1 )
model_prophet.add_seasonality(name = 'monthly', period = 30.5, fourier_order = 5)
model_prophet.fit(train) #only train

#forecasting
future_daily = model_prophet.make_future_dataframe(periods = 600, freq = 'D') 
forecast_daily = model_prophet.predict(future_daily)
forecast_daily.loc[(forecast_daily.yhat < 0),['yhat']] = 0

#visualize
fig = model_prophet.plot(forecast_daily)
plt.scatter(x=test['ds'], y=test['y'], s=10, color='red')
plt.show()

